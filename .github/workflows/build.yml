name: Build Windows Executable

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.3.0
        pip install -r requirements.txt
    
    - name: Create PyInstaller spec file
      run: |
        python -c "
        spec_content = '''
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        from PyInstaller.utils.hooks import collect_all, collect_submodules
        
        block_cipher = None
        
        datas = [(\"shapefiles\", \"shapefiles\")]
        binaries = []
        hiddenimports = [
            \"streamlit\",
            \"streamlit.runtime.scriptrunner.magic_funcs\",
            \"streamlit.runtime.scriptrunner.script_run_context\",
            \"streamlit.web.cli\",
            \"pandas\",
            \"geopandas\",
            \"shapely\",
            \"fiona\",
            \"pyproj\",
            \"plotly\",
            \"numpy\",
            \"altair\",
            \"tornado\",
        ]
        
        # Collect all streamlit data and dependencies
        tmp_ret = collect_all(\"streamlit\")
        datas += tmp_ret[0]
        binaries += tmp_ret[1]
        hiddenimports += tmp_ret[2]
        
        # Collect other packages
        for package in [\"altair\", \"plotly\", \"pandas\", \"pyarrow\"]:
            tmp_ret = collect_all(package)
            datas += tmp_ret[0]
            binaries += tmp_ret[1]
            hiddenimports += tmp_ret[2]
        
        a = Analysis(
            [\"app.py\"],
            pathex=[],
            binaries=binaries,
            datas=datas,
            hiddenimports=hiddenimports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name=\"SalesDashboard\",
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        '''
        with open('SalesDashboard.spec', 'w') as f:
            f.write(spec_content)
        "
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --clean SalesDashboard.spec
    
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: SalesDashboard-Windows
        path: dist/SalesDashboard.exe
        retention-days: 90
